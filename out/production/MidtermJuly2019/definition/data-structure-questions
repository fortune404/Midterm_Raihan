Please answer the below Data Structure Questions:

why do we need data structure?
A.
Data structures help us to store and retrieve data.


What are the various operations that can be performed on different Data Structures?
A.
The basic operations that are performed on data structures consist of;
1)Insertion: Insertion means addition of a new data element in a data structure.
2)Deletion: Deletion means removal of a data element from a data structure if it is
found.


List out the areas in which data structures are applied extensively?
A.
1)Compiler Design,
2) System,
3)Database Management System,
4)Statistical analysis package,
5)Numerical Analysis,
6)Graphics,
7)Artificial Intelligence,
8)Simulation.


What is an Array?
A.
Array is an arrangement of objects, pictures, or numbers in columns and rows
is called an array.


What is the difference between the Array and ArrayList?
A.
1) First and Major difference between Array and ArrayList in Java is that Array is a fixed length data structure while
ArrayList is a variable length Collection class.
2) Generics can not be used alongwith Array.
3) Primitives can not be stored in ArrayList as it can only contain Objects while Array can contain both primitives and
Objects in Java.


What is LinkedList?
A.
A linked list is a linear data structure where each element is a separate object.


How is an Array different from Linked List?
A.
The difference between an array and a linked list is that; an array is an index based data
structure where every element is associated with an index while the linked list is a data
structure that uses references, each node is referred to another node.

What is queue?
A.
The Queue interface is available in java.util package. The Queue is used to insert
elements at the end of the queue and removes from the beginning of the queue.


What is stack?
A.
A Stack is a Last In First Out (LIFO) data structure which supports two basic operations
called push and pop. The push operation adds an element at the top of the stack, and the
pop operation removes an element from the top of the stack.


What is FIFO and LIFO?
A.
FIFO is an acronym for first in, first out, a method for organizing and manipulating a
data buffer while FIFO's opposite is LIFO, last-in-first-out, where the youngest entry
or 'top of the stack' is processed first.


What is the order of complexity?
A.
This means that it is a certain mathematical expression of the size of the input,
and the algorithm finishes between two factors of it.


What is the best case to search an element from an array?
A.
Best case occurs when array is already sorted.


What is the worst case to search an element from an array?
A.
When an array is unsorted then it is a worst case to search an element.


What is tree in data structure?
A.
A Tree is a non-linear data structure where data objects are organized in terms
of hierarchical relationship.


What is graph in data structure?
A.
A graph is an object consisting of a vertex set and an edge set.


What is the difference between the HashTable and HashMap?
A.
Hashtable is synchronized whereas hashMap is not.


What are the major data structures used in the following areas : RDBMS, Network data
model and Hierarchical data model.
A.
RDBMS uses Array.
Network data model uses Graphs and
Hierarchical data model uses Trees.


How HashMap works in java?
A.
HashMap implementation calls hashCode method on Key object and applies returned
hashcode into its own hashing function to find a bucket location for storing Entry object,
important point to mention is that HashMap in Java stores both key and value.


What is ArrayIndexOutOfBoundsException in java? When it occurs?
A.
An attempt to use an index that is less than zero or greater than or equal to the length of
the array causes an ArrayIndexOutOfBoundsException.


What are the different ways of copying an array into another array?
A.
1. Manually
2. Arrays.copyOf() We can directly copy one array to another by using Arrays.copyOf() method.
It has following syntax.
3. System.arraycopy().  It is another method that directly copies one array to another.
It has following syntax.
4. Object.clone(). We can also use clone() method of Object class to make a copy of an array.


What is difference between an array and a linked list?
A.
In array, each element is independent, no connection with previous element or with its location.
In Linked list, location or address of elements is stored in the link part of previous element/node.


What is DFS and BFS?
A.
The breadth first search (BFS) and the depth first search (DFS) are the two algorithms used for
traversing and searching a node in a graph. They can also be used to find out whether a node is
reachable from a given node or not.


What is Recursion?
A.
recursion is the process in which a method repeatedly calls itself with smaller data set then the
last until a base case is reached


What are linear and non linear data Structures?
A.
Linear data structures grow directly proportional to the number of elements, non linear DS grow
either faster or slower than linear ones.


What is Big-(O)-notation?
A.
It’s useful to have a shorthand way to say how efficient a computer algorithm is. In computer
science, this rough measure is called “Big O” notation. It is a comparison that tells how an
algorithm’s speed is related to the number of items.


Outlined different kind of sorting algorithm with time complexity?
A.
BubbleSort = n^2
InsertionSort = n^2
SelectionSort = 2^2
QuickSort = nlogn
MergeSort = nlogn
BucketSort= n+k


Draw a table with time complexity in which it will summarize all the data structure feature's advantages and disadvantages.
  a)In terms of Accessing element.
  b)In terms of Inserting element.
  c)In terms of Searching element.
  d)In terms of Removing element.
A.
Array: search o(n), access o(1), insert o(n), deletion o(n)
ArrayList: search o(n), access o(1), insert o(n), deletion o(n)
LinkedList: search o(n), access o(1), insert o(1), deletion o(1)
Stack: search o(n), access o(n), insert o(1), deletion o(1)
Queue: search o(n), access o(n), insert o(1), deletion o(1)
B-Tree: search o(log n), access o(log n), insert o(log n), deletion o(log n)